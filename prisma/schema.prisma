// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  firstName String
  lastName String
  email String @unique
  password String
  isActivated Boolean @default(false)
  activationLink String?
  token Token?
  projects Project[]
  groups GroupsOnUsers[]
  groupsLeadership Group[]
  tasks Task[]
  assignedTasks TasksOnExecutors[]
}

model Token {
  user   User @relation(fields: [userId], references: [id])
  userId Int @unique
  refreshToken String
}

model Project {
  id Int @id @default(autoincrement())
  name String
  description String
  owner User @relation(fields: [ownerId], references: [id])
  ownerId Int
  groups Group[]
  tasks Task[]
  tags Tag[]
}

model Group {
  id Int @id @default(autoincrement())
  name String
  lead User @relation(fields: [leadId], references: [id])
  leadId Int
  project Project @relation(fields: [projectId], references: [id])
  projectId Int
  members GroupsOnUsers[]
  tasks Task[]
}

model GroupsOnUsers {
  user User @relation(fields: [userId], references: [id])
  userId Int
  group Group @relation(fields: [groupId], references: [id])
  groupId Int
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([userId, groupId])
}

model Tag {
  id Int @id @default(autoincrement())
  name String
  color String
  tasks TasksOnTags[]
  project Project @relation(fields: [projectId], references: [id])
  projectId Int
}

model Status {
  id Int @id @default(autoincrement())
  name String
  tasks Task[]
}

model TasksOnTags {
  task Task @relation(fields: [taskId], references: [id])
  taskId Int
  tag Tag @relation(fields: [tagId], references: [id])
  tagId Int

  @@id([taskId, tagId])
}

// model TasksOnStatuses {
//   task Task @relation(fields: [taskId], references: [id])
//   taskId Int
//   status Status @relation(fields: [statusId], references: [id])
//   statusId Int

//    @@id([taskId, statusId])
// }

 model TasksOnExecutors {
  task Task @relation(fields: [taskId], references: [id])
  taskId Int
  executor User @relation(fields: [executorId], references: [id])
  executorId Int

   @@id([taskId, executorId])
}

model Task {
  id Int @id @default(autoincrement())
  name String
  description String
  author User @relation(fields: [authorId], references: [id])
  authorId Int
  executors TasksOnExecutors[]
  tags TasksOnTags[]
  createdAt DateTime @default(now())
  deadline DateTime
  status Status @relation(fields: [statusId], references: [id])
  statusId Int
  project Project @relation(fields: [projectId], references: [id])
  projectId Int
  group Group @relation(fields: [groupId], references: [id])
  groupId Int
}



