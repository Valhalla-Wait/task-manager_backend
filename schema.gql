# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AddUserGroupInput {
  assignedBy: String!
  groupId: Int!
  userId: Int!
}

input CreateGroupInput {
  assignedBy: String!
  leadId: Int!
  membersIds: [Int!]
  name: String!
  projectId: Int!
}

input CreateProjectInput {
  description: String!
  name: String!
  ownerId: Int!
}

input CreateStatusInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input CreateTagInput {
  color: String!
  name: String!
  taskId: Int!
}

input CreateTaskInput {
  authorId: Int!
  deadline: DateTime!
  description: String!
  executorIds: [Int!]!
  groupId: Int!
  name: String!
  projectId: Int!
  tagIds: [Int!]!
}

input CreateUserInput {
  activationLink: String!
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeleteMembersGroupInput {
  groupId: Int!
  userId: Int!
}

input GetProjectsInput {
  ownerId: Int!
}

type Group {
  id: ID!
  leadId: Int!
  name: String!
  projectId: Int!
}

type GroupData {
  id: ID!
  lead: User!
  members: [User!]!
  name: String!
  projectId: Int!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginUser {
  email: String!
  firstName: String!
  id: ID!
  isActivated: Boolean!
  lastName: String!
}

type LoginUserData {
  accessToken: String!
  refreshToken: String!
  user: LoginUser!
}

type LogoutData {
  message: String!
}

input LogoutInput {
  userId: Int!
}

type Mutation {
  addLeadInGroup(addLeadInGroup: AddUserGroupInput!): GroupData!
  addMembersInGroup(addMembersGroupInput: AddUserGroupInput!): GroupData!
  createGroup(createGroupInput: CreateGroupInput!): GroupData!
  createProject(createProjectInput: CreateProjectInput!): Project!
  createStatus(createStatusInput: CreateStatusInput!): Status!
  createTag(createTagInput: CreateTagInput!): TaskData!
  createTask(createTaskInput: CreateTaskInput!): TaskData!
  createUser(createUserInput: CreateUserInput!): User!
  deleteMembersInGroup(deleteMembersGroupInput: DeleteMembersGroupInput!): GroupData!
  deleteProject(deleteProjectInput: Float!): Project!
  deleteTask(id: Int!): TaskData!
  registration(registrationUserInput: RegistrationUserInput!): RegistratedUserData!
  removeStatus(id: Int!): Status!
  removeTag(id: Int!): TaskData!
  renameGroup(renameGroupInput: RenameGroupInput!): Group!
  updateProject(updateProjectInput: UpdateProjectInput!): Project!
  updateStatus(updateStatusInput: UpdateStatusInput!): Status!
  updateTag(updateTagInput: UpdateTagInput!): TaskData!
  updateTask(updateTaskInput: UpdateTaskInput!): TaskData!
}

type Project {
  description: String!
  id: ID!
  name: String!
  ownerId: Int!
}

type Query {
  getTagsByTaskId(taskId: Int!): [Tag!]!
  groupById(groupId: Float!): GroupData!
  groupsByProjectId(projectId: Float!): [GroupData!]!
  login(loginInput: LoginInput!): LoginUserData!
  logout(logoutInput: LogoutInput!): LogoutData!
  projectAnalitics(projectId: Int!): [TasksAnalyticByStatus!]!
  projectAnaliticsByGroupId(getGroupAnalyticByIdInput: getGroupAnalyticInput!): TasksAnalyticByGroups!
  projectAnaliticsByGroups(projectId: Int!): [TasksAnalyticByGroups!]!
  projectAnaliticsByUsers(projectId: Int!): [TasksAnalyticByUsers!]!
  projectAnaliticsGroupByUsers(getGroupAnalyticByIdInput: getGroupAnalyticInput!): [TasksAnalyticByUsers!]!
  projectsListById(getProjectByIdInput: Float!): Project!
  projectsListByOwnerId(getProjectsInput: GetProjectsInput!): [Project!]!
  refresh(refreshInput: RefreshInput!): LoginUserData!
  status(id: Int!): Status!
  statuses: [Status!]!
  tag(id: Int!): Tag!
  taskById(id: Int!): TaskData!
  tasksByProjectId(projectId: Int!): [TaskData!]!
  usersList: [User!]!
}

input RefreshInput {
  refreshToken: String!
  userId: Int!
}

type RegistratedUser {
  email: String!
  firstName: String!
  id: ID!
  isActivated: Boolean!
  lastName: String!
}

type RegistratedUserData {
  accessToken: String!
  refreshToken: String!
  user: RegistratedUser!
}

input RegistrationUserInput {
  email: String!
  firstName: String!
  lastName: String!
  password: String!
}

input RenameGroupInput {
  groupId: Int!
  name: String!
}

type Status {
  id: ID!
  name: String!
}

type Tag {
  color: String!
  id: ID!
  name: String!
  taskId: Int!
}

type TaskData {
  authorId: Int!
  createdAt: DateTime!
  deadline: DateTime!
  description: String!
  executors: [User!]!
  groupId: Int!
  id: ID!
  name: String!
  projectId: Int!
  status: Status!
  statusId: Int!
  tags: [TaskTag!]!
}

type TaskTag {
  color: String!
  id: Int!
  name: String!
}

type TasksAnalyticByGroups {
  analytic: [TasksAnalyticByStatus!]!
  id: Int!
  name: String!
}

type TasksAnalyticByStatus {
  percent: String!
  tasksCount: Int!
  tasksStatus: String!
}

type TasksAnalyticByUsers {
  analytic: [TasksAnalyticByStatus!]!
  firstName: String!
  id: Int!
  lastName: String!
}

input UpdateProjectInput {
  description: String
  id: Int!
  name: String
}

input UpdateStatusInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}

input UpdateTagInput {
  color: String
  id: Int!
  name: String
  taskId: Int
}

input UpdateTaskInput {
  authorId: Int
  deadline: DateTime
  description: String
  executorIds: [Int!]
  groupId: Int
  id: Int!
  name: String
  projectId: Int
  statusId: Int!
  tagIds: [Int!]
}

type User {
  activationLink: String!
  email: String!
  firstName: String!
  id: ID!
  isActivated: Boolean!
  lastName: String!
  password: String!
}

input getGroupAnalyticInput {
  groupId: Int!
  projectId: Int!
}